{"version":3,"file":"rtv.esm.js","sources":["../node_modules/lodash-es/_freeGlobal.js","../node_modules/lodash-es/_root.js","../node_modules/lodash-es/_Symbol.js","../node_modules/lodash-es/_getRawTag.js","../node_modules/lodash-es/_objectToString.js","../node_modules/lodash-es/_baseGetTag.js","../node_modules/lodash-es/isArray.js","../node_modules/lodash-es/isObjectLike.js","../node_modules/lodash-es/isString.js","../src/types.js","../src/qualiiers.js","../src/Enumeration.js","../src/main.js"],"sourcesContent":["/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","//// Type Definitions \\\\\\\\\n\n'use strict';\n\n/**\n * Types\n *\n * <h4>Primitives</h4>\n *\n * In RTV.js, a primitive is considered to be one of the following types:\n *\n * - `string` (note that `new String('s')` does not produce a _primitive_, it\n *   produces an _object_, and should generally be avoided).\n * - `boolean` (note that `new Boolean(true)` does not produce a _primitive_,\n *   it produces an _object_, and should generally be avoided).\n * - `number` (note that `new Number(1)` does not produce a _primitive_,\n *   it produces an _object_, and should generally be avoided).\n * - `Symbol`\n * - `null`\n * - `undefined`\n *\n * <h4>Rules Per Qualifiers</h4>\n *\n * {@link rtv.qualifiers Qualifiers} state basic rules. Unless otherwise stated,\n *  every type herein abides by those basic rules. Each type will also impose\n *  additional rules specific to the type of value it represents.\n *\n * For example, while the {@link rtv.types.FINITE FINITE} type states that the\n *  value must not be `NaN`, `+Infinity`, nor `-Infinity`, it could be `null` if\n *  the qualifier used is `EXPECTED`, and it could be `undefined` if the qualifier\n *  used is `OPTIONAL`.\n *\n * <h4>Arguments</h4>\n *\n * Some types will accept, or may even expect, arguments. An argument immediately\n *  follows the type in the description, such as `PLAIN_OBJECT, {hello: STRING}`.\n *  This would specify that the value must be a {@link rtv.types.PLAIN_OBJECT plain object}\n *  with a shape that includes a property named 'hello', that property being a\n *  {@link rtv.qualifiers.REQUIRED required} {@link rtv.types.STRING string}.\n *\n * Optional and required arguments are specified for each type, where applicable.\n *\n * @namespace rtv.types\n */\n\n/**\n * Collection Descriptor\n *\n * Describes the keys and values in a collection-based object, which is one of\n *  the following types:\n *\n * - {@link rtv.types.MAP_OBJECT MAP_OBJECT}\n * - {@link rtv.types.MAP MAP}\n * - {@link rtv.types.WEAK_MAP WEAK_MAP}\n * - {@link rtv.types.SET SET} (with some exceptions)\n * - {@link rtv.types.WEAK_SET WEAK_SET} (with some exceptions)\n *\n * Note that an {@link rtv.types.ARRAY ARRAY} is __not__ included in this list\n *  because the array type has special syntax for describing the type of its items.\n *\n * For example, the following descriptors both verify a collection of 3-letter\n *  string keys (upper- or lowercase) to finite numbers:\n *\n * - `{keyExp: '[a-z]{3}', keyExpFlags: 'i', values: rtv.types.FINITE}`\n * - `{keyExp: '[a-zA-Z]{3}', values: rtv.types.FINITE}`\n *\n * @typedef {Object} rtv.types.collection_descriptor\n * @property {rtv.types.typeset} [keys] Optional. A typeset describing each key\n *  in the collection.\n *\n * The type of collection being described may restrict the types that this typeset\n *  can include. For example, the {@link rtv.types.MAP_OBJECT MAP_OBJECT} collection\n *  only supports the {@link rtv.types.STRING STRING} type due to the nature of\n *  its JavaScript Object-based implementation.\n *\n * NOTE: This property is ignored when the collection is a {@link rtv.types.SET SET}\n *  or a {@link rtv.types.WEAK_SET WEAK_SET} because sets do not have keys.\n *\n * @property {String} [keyExp] Optional. A string-based regular expression\n *  describing the names of keys (own-enumerable properties) found in the\n *  collection.\n *\n * By default, there are no restrictions on key names. This expression is only\n *  used if the `keys` typeset includes the {@link rtv.types.STRING STRING} type.\n *\n * For example, to require numerical keys, the following expression could be\n *  used: `'^\\\\d+$'`.\n *\n * NOTE: This property is ignored when the collection is a {@link rtv.types.SET SET}\n *  or a {@link rtv.types.WEAK_SET WEAK_SET} because sets do not have keys.\n *\n * @property {String} [keyExpFlags] Optional. A string specifying any flags to use\n *  with the regular expression specified in `keyExp`. If this property is _falsy_,\n *  default `RegExp` flags will be used. Ignored if `keyExp` is not specified, or\n *  does not apply per the `keys` typeset.\n *\n * NOTE: This property is ignored when the collection is a {@link rtv.types.SET SET}\n *  or a {@link rtv.types.WEAK_SET WEAK_SET} because sets do not have keys.\n *\n * @property {rtv.types.typeset} [values] Optional. A typeset describing each value\n *  in the collection. Defaults to the {@link rtv.types.ANY ANY} type which allows\n *  _anything_. All values must match this typeset (but the collection is not\n *  required to have any entries/properties to be considered valid, unless\n *  `count` is specified).\n *\n * For example, to require arrays of non-empty string values, the following\n *  typeset could be used: `[[types.STRING]]`.\n *\n * @property {number} [count=-1] Optional. The number of entries expected in\n *  the collection. A negative value allows for any number of entries. Zero\n *  requires an empty collection.\n *\n * @see rtv.types.MAP_OBJECT\n * @see rtv.types.MAP\n * @see rtv.types.WEAK_MAP\n * @see rtv.types.SET\n * @see rtv.types.WEAK_SET\n */\n\n/**\n * Typeset\n *\n * Describes a property found in a {@link rtv.shape_descriptor shape descriptor}.\n *  It can be any one of the following JavaScript values:\n *\n * - `String '<type>'`: For a single type, such as {@link rtv.types.FINITE 'FINITE'}\n *   for a finite number.\n * - `Array []`: For multiple type possibilities, using an OR conjunction, which\n *   means the value of the property being described must be one of the types listed.\n *   Note that when a nested array is encountered (i.e. an array within a typeset),\n *   it is treated as the shortcut {@link rtv.types.ARRAY ARRAY} form, implying an\n *   array of values of some type, e.g. `values: [[STRING, FINITE]]` would describe\n *   a 'values' property that could be an array of non-empty strings or finite numbers.\n * - `Object {}`: For a nested {@link rtv.shape_descriptor shape descriptor} of implied\n *   {@link rtv.types.OBJECT OBJECT} type (unless qualified with a specific object\n *   type like {@link rtv.types.PLAIN_OBJECT PLAIN_OBJECT}, for example).\n * - `Function`: For a {@link rtv.types.property_validator property validator}\n *   that will certify the value of the property using custom code.\n *\n * <h4>Example</h4>\n *\n * <pre><code>\n * const contactShape = {\n *   name: rtv.types.STRING, // required, non-empty, string\n *   tags: [rtv.types.ARRAY, [rtv.types.STRING]], // required array of non-empty strings\n *   tags2: [[rtv.types.STRING]], // same as 'tags' but using shortcut array format\n *   details: { // required nested object of type `rtv.types.OBJECT` (default)\n *     birthday: [rtv.qualifiers.EXPECTED, rtv.types.DATE] // Date (could be null)\n *   },\n *   notes: [rtv.types.STRING, function(value) { // required non-empty string...\n *     return value.length < 500; // ...less than 500 characters long\n *   }]\n * };\n * </code></pre>\n *\n * @typedef {Object} rtv.types.typeset\n */\n\n/**\n * Property Validator\n *\n * // TODO: document rtv.types.property_validator (already referenced)\n *\n * Note one disadvantage: cannot be de/serialized via JSON.\n *\n * @typedef {Function} rtv.types.property_validator\n */\n\n/**\n * The any type is special in that it allows _anything_, which includes `null`\n *  and `undefined` values. Because of this, it's the most liberal in terms of\n *  types as well as qualifiers. A more specific type should be used whenever\n *  possible to ensure a higher degree of confidence in the value being validated.\n *\n * Any rules per qualifiers:\n *\n * - REQUIRED: Property must be defined _somewhere_ in the prototype chain, but\n *   its value can be anything, including `null` and `undefined`.\n * - EXPECTED: Same rules as REQUIRED.\n * - OPTIONAL: Since this qualifier removes the property's need for existence\n *   in the prototype chain, it renders the verification moot (i.e. the property\n *   might as well not be included in the {@link rtv.shape_descriptor shape descriptor}\n *   unless a {@link rtv.types.property_validator property validator} is being\n *   used to do customized verification.\n *\n * @name rtv.types.ANY\n * @const {String}\n * @see {@link rtv.qualifiers}\n */\nexport var ANY = 'any';\n\n/**\n * String rules per qualifiers:\n *\n * - REQUIRED: Must be a non-empty string.\n * - EXPECTED | OPTIONAL: Can be an empty string.\n *\n * @name rtv.types.STRING\n * @const {String}\n * @see {@link rtv.qualifiers}\n */\nexport var STRING = 'string';\n\n/**\n * Boolean rules per qualifiers: Must be a boolean.\n * @name rtv.types.BOOLEAN\n * @const {String}\n * @see {@link rtv.qualifiers}\n */\nexport var BOOLEAN = 'boolean';\n\n/**\n * Number rules per qualifiers:\n *\n * - REQUIRED: Cannot be `NaN`, but could be `+Infinity`, `-Infinity`.\n * - EXPECTED | OPTIONAL: Could be `NaN`, `+Infinity`, `-Infinity`.\n *\n * @name rtv.types.NUMBER\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see {@link rtv.types.FINITE}\n */\nexport var NUMBER = 'number';\n\n/**\n * Symbol rules per qualifiers: Must be a symbol.\n * @name rtv.types.SYMBOL\n * @const {String}\n * @see {@link rtv.qualifiers}\n */\nexport var SYMBOL = 'symbol';\n\n/**\n * Finite rules per qualifiers: Cannot be `NaN`, `+Infinity`, `-Infinity`. The\n *  value can be either a safe integer or a {@link rtv.types.FLOAT floating point number}.\n * @name rtv.types.FINITE\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see {@link rtv.types.NUMBER}\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger Number.isSafeInteger()}\n */\nexport var FINITE = 'finite';\n\n/**\n * Int rules per qualifiers: Must be a {@link rtv.types.FINITE finite} integer,\n *  but is not necessarily _safe_.\n * @name rtv.types.INT\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see {@link rtv.types.FINITE}\n * @see {@link rtv.types.FLOAT}\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger Number.isSafeInteger()}\n */\nexport var INT = 'int';\n\n/**\n * Float rules per qualifiers: Must be a finite floating point number.\n * @name rtv.types.FLOAT\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see {@link rtv.types.INT}\n */\nexport var FLOAT = 'float';\n\n/**\n * An _any_ object is anything that is not a {@link rtv.types primitive}, which\n *  means it includes the `Array` type, as well as functions and arguments. To\n *  test for an array, use the {@link rtv.types.ARRAY ARRAY} type. To\n *  test for a function, use the {@link rtv.types.FUNCTION FUNCTION} type.\n *\n * The following values are considered any objects:\n *\n * - `{}`\n * - `new Object()`\n * - `[]`\n * - `new Array()`\n * - `function(){}`\n * - `arguments` (function arguments)\n * - `new String('')`\n * - `new Boolean(true)`\n * - `new Number(1)`\n * - `/re/`\n * - `new RegExp('re')`\n * - `new function() {}` (class instance)\n * - `new Set()`\n * - `new WeakSet()`\n * - `new Map()`\n * - `new WeakMap()`\n *\n * The following values __are not__ considered any objects (because they are\n *  considered to be {@link rtv.types primitives}):\n *\n * - `Symbol('s')`\n * - `true`\n * - `1`\n * - `''`\n * - `null` (NOTE: `typeof null === 'object'` in JavaScript; the `ANY_OBJECT`\n *   type allows testing for this undesirable fact)\n * - `undefined`\n *\n * Any object rules per qualifiers:\n *\n * - REQUIRED: Per the lists above.\n * - EXPECTED: `null` is allowed.\n * - OPTIONAL: `undefined` is allowed.\n *\n * Arguments (optional):\n *\n * - A nested shape description.\n *\n * @name rtv.types.ANY_OBJECT\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see {@link rtv.types.OBJECT}\n * @see {@link rtv.types.PLAIN_OBJECT}\n * @see {@link rtv.types.CLASS_OBJECT}\n * @see {@link rtv.types.MAP_OBJECT}\n */\nexport var ANY_OBJECT = 'anyObject';\n\n/**\n * An object is one that extends from `JavaScript.Object` and is not\n *  a {@link rtv.types.FUNCTION function}, {@link rtv.types.ARRAY array},\n *  {@link rtv.types.REGEXP regular expression}, function arguments object,\n *  {@link rtv.types.MAP map}, {@link rtv.types.WEAK_MAP weak map},\n *  {@link rtv.types.SET set}, {@link rtv.types.WEAK_SET weak set}, nor a\n *  {@link rtv.types primitive}.\n *\n * This is the __default__ (imputed) type for\n *  {@link rtv.shape_descriptor shape descriptors}, which means the object itself\n *  (the value being tested), prior to being checked against its shape, will be\n *  tested according to this type.\n *\n * The following values are considered objects:\n *\n * - `{}`\n * - `new Object()`\n * - `new String('')`\n * - `new Boolean(true)`\n * - `new Number(1)`\n * - `new function() {}` (class instance)\n *\n * The following values __are not__ considered objects:\n *\n * - `[]`\n * - `new Array()`\n * - `/re/`\n * - `new RegExp('re')`\n * - `function(){}`\n * - `arguments` (function arguments)\n * - `new Set()`\n * - `new WeakSet()`\n * - `new Map()`\n * - `new WeakMap()`\n * - `Symbol('s')`\n * - `true`\n * - `1`\n * - `''`\n * - `null`\n * - `undefined`\n *\n * Object rules per qualifiers:\n *\n * - REQUIRED: Per the lists above.\n * - EXPECTED: `null` is allowed.\n * - OPTIONAL: `undefined` is allowed.\n *\n * Arguments (optional):\n *\n * - A nested shape description.\n *\n * @name rtv.types.OBJECT\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see {@link rtv.types.ANY_OBJECT}\n * @see {@link rtv.types.PLAIN_OBJECT}\n * @see {@link rtv.types.CLASS_OBJECT}\n * @see {@link rtv.types.MAP_OBJECT}\n */\nexport var OBJECT = 'object';\n\n/**\n * A _plain_ object is one that is created directly from the `Object` constructor,\n *  whether using `new Object()` or the literal `{}`.\n *\n * The following values are considered plain objects:\n *\n * - `{}`\n * - `new Object()`\n *\n * The following values __are not__ considered plain objects:\n *\n * - `[]`\n * - `new Array()`\n * - `function(){}`\n * - `arguments` (function arguments)\n * - `new String('')`\n * - `new Boolean(true)`\n * - `new Number(1)`\n * - `/re/`\n * - `new RegExp('re')`\n * - `new function() {}` (class instance)\n * - `new Set()`\n * - `new WeakSet()`\n * - `new Map()`\n * - `new WeakMap()`\n * - `Symbol('s')`\n * - `true`\n * - `1`\n * - `''`\n * - `null`\n * - `undefined`\n *\n * Plain object rules per qualifiers:\n *\n * - REQUIRED: Per the lists above.\n * - EXPECTED: `null` is allowed.\n * - OPTIONAL: `undefined` is allowed.\n *\n * Arguments (optional):\n *\n * - A nested shape description.\n *\n * @name rtv.types.PLAIN_OBJECT\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see {@link rtv.types.ANY_OBJECT}\n * @see {@link rtv.types.OBJECT}\n * @see {@link rtv.types.CLASS_OBJECT}\n * @see {@link rtv.types.MAP_OBJECT}\n */\nexport var PLAIN_OBJECT = 'plainObject';\n\n/**\n * A _class_ object is one that is created by invoking the `new` operator on a\n *  function (other than a primitive type function), generating a new object,\n *  commonly referred to as a _class instance_. This object's prototype\n *  (`__proto__`) is a reference to that function's `prototype`.\n *\n * The following values are considered class objects:\n *\n * - `new function() {}`\n *\n * The following values __are not__ considered class objects:\n *\n * - `{}`\n * - `new Object()`\n * - `[]`\n * - `new Array()`\n * - `function(){}`\n * - `arguments` (function arguments)\n * - `new String('')`\n * - `new Boolean(true)`\n * - `new Number(1)`\n * - `/re/`\n * - `new RegExp('re')`\n * - `new Set()`\n * - `new WeakSet()`\n * - `new Map()`\n * - `new WeakMap()`\n * - `Symbol('s')`\n * - `true`\n * - `1`\n * - `''`\n * - `null`\n * - `undefined`\n *\n * Class object rules per qualifiers:\n *\n * - REQUIRED: Per the lists above.\n * - EXPECTED: `null` is allowed.\n * - OPTIONAL: `undefined` is allowed.\n *\n * Arguments (optional, specify one or the other, or both __in order__):\n *\n * - A reference to a constructor function. If specified, the class object\n *   (instance) must have this class function in its inheritance chain such\n *   that `<class_object> instanceof <function> === true`.\n * - A nested shape description.\n *\n * @name rtv.types.CLASS_OBJECT\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see {@link rtv.types.ANY_OBJECT}\n * @see {@link rtv.types.OBJECT}\n * @see {@link rtv.types.PLAIN_OBJECT}\n * @see {@link rtv.types.MAP_OBJECT}\n */\nexport var CLASS_OBJECT = 'classObject';\n\n/**\n * A _map_ object is an {@link rtv.types.OBJECT OBJECT} that is treated as a\n *  hash map with an expected set of keys and values. Keys can be described\n *  using a regular expression, and values can be described using a\n *  {@link rtv.types.typeset typeset}. Empty maps are permitted.\n *\n * Map object rules per qualifiers: Same as {@link rtv.types.OBJECT OBJECT} rules.\n *\n * Argument (optional):\n *\n * - A {@link rtv.types.collection_descriptor collection descriptor} specifying\n *   the rules for the keys and/or values found in the map. If not specified,\n *   the default collection descriptor options apply. __NOTE:__ Since a map object\n *   is based on a JavaScript Object (which only supports string-based keys), the\n *   collection descriptor's `keys` type defaults to (and is required to be)\n *   {@link rtv.types.STRING STRING}.\n *\n * @name rtv.types.MAP_OBJECT\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see {@link rtv.types.ANY_OBJECT}\n * @see {@link rtv.types.OBJECT}\n * @see {@link rtv.types.PLAIN_OBJECT}\n * @see {@link rtv.types.CLASS_OBJECT}\n * @see {@link rtv.types.MAP}\n * @see {@link rtv.types.WEAK_MAP}\n */\nexport var MAP_OBJECT = 'mapObject';\n\n// TODO: Is there a way that ARRAY could take a parameter, that being the\n//  required length of the array, defaulting to -1 for any length? Perhaps\n//  only when using the full form as `[ARRAY, 2, [STRING]]` instead of the\n//  short form as `[[STRING]]`? If so, then this would be up to par with\n//  the MAP_OBJECT where a count can be specified...\n/**\n * Array rules per qualifiers: Must be an `Array`. Empty arrays are permitted.\n * @name rtv.types.ARRAY\n * @const {String}\n * @see {@link rtv.qualifiers}\n */\nexport var ARRAY = 'array';\n\n/**\n * JSON rules per qualifiers: Must be a JSON value:\n *\n * - {@link rtv.types.STRING string}, however __empty strings__ are permitted,\n *   even if the qualifier is `REQUIRED`;\n * - {@link rtv.types.BOOLEAN boolean};\n * - {@link rtv.types.FINITE finite number};\n * - {@link rtv.types.PLAIN_OBJECT plain object};\n * - {@link rtv.types.ARRAY array};\n * - `null`\n *\n * Since this type checks for _any_ valid JSON value, empty string and `null`\n *  values are permitted, even when the typeset is qualified as `REQUIRED`.\n *  Therefore, the `REQUIRED` qualifier has the same effect as the `EXPECTED`\n *  qualifier.\n *\n * @name rtv.types.JSON\n * @const {String}\n * @see {@link rtv.qualifiers}\n */\nexport var JSON = 'json';\n\n/**\n * Function rules per qualifiers: Must be a `function`.\n * @name rtv.types.FUNCTION\n * @const {String}\n * @see {@link rtv.qualifiers}\n */\nexport var FUNCTION = 'function';\n\n/**\n * RegExp rules per qualifiers: Must be a `RegExp` instance.\n * @name rtv.types.REGEXP\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n */\nexport var REGEXP = 'regexp';\n\n/**\n * Date rules per qualifiers: Must be a `Date` instance.\n * @name rtv.types.DATE\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n */\nexport var DATE = 'date';\n\n/**\n * Error rules per qualifiers: Must be an `Error` instance.\n * @name rtv.types.ERROR\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n */\nexport var ERROR = 'error';\n\n/**\n * Promise rules per qualifiers: Must be a `Promise` instance.\n * @name rtv.types.PROMISE\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n */\nexport var PROMISE = 'promise';\n\n/**\n * An ES6 map supports any object as its keys, unlike a\n *  {@link rtv.types.MAP_OBJECT MAP_OBJECT} that only supports strings. Keys can\n *  be described using a regular expression (if they are strings), and values can\n *  be described using a {@link rtv.types.typeset typeset}. Empty maps are permitted.\n *\n * Map rules per qualifiers: Must be a `Map` instance.\n *\n * Argument (optional):\n *\n * - A {@link rtv.types.collection_descriptor collection descriptor} specifying\n *   the rules for the keys and/or values found in the map. If not specified,\n *   the default collection descriptor options apply.\n *\n * @name rtv.types.MAP\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see {@link rtv.types.MAP_OBJECT}\n * @see {@link rtv.types.WEAK_MAP}\n */\nexport var MAP = 'map';\n\n/**\n * An ES6 weak map supports any object as its keys, unlike a\n *  {@link rtv.types.MAP_OBJECT MAP_OBJECT} that only supports strings. Keys can\n *  be described using a regular expression (if they are strings), and values can\n *  be described using a {@link rtv.types.typeset typeset}. Empty maps are permitted.\n *\n * Weak map rules per qualifiers: Must be a `WeakMap` instance.\n *\n * Argument (optional):\n *\n * - A {@link rtv.types.collection_descriptor collection descriptor} specifying\n *   the rules for the keys and/or values found in the map. If not specified,\n *   the default collection descriptor options apply.\n *\n * @name rtv.types.WEAK_MAP\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see {@link rtv.types.MAP_OBJECT}\n * @see {@link rtv.types.MAP}\n */\nexport var WEAK_MAP = 'weakMap';\n\n/**\n * An ES6 set is a collection of _unique_ values without associated keys. Values can\n *  be described using a {@link rtv.types.typeset typeset}. Empty sets are permitted.\n *\n * Set rules per qualifiers: Must be a `Set` instance.\n *\n * Argument (optional):\n *\n * - A {@link rtv.types.collection_descriptor collection descriptor} specifying\n *   the rules for the values found in the set (note that key-related rules are\n *   ignored since they are not applicable). If not specified, the default\n *   collection descriptor options apply.\n *\n * @name rtv.types.SET\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see {@link rtv.types.WEAK_SET}\n */\nexport var SET = 'set';\n\n/**\n * An ES6 weak set is a collection of _unique_ values without associated keys. Values can\n *  be described using a {@link rtv.types.typeset typeset}. Empty sets are permitted.\n *\n * Weak set rules per qualifiers: Must be a `WeakSet` instance.\n *\n * Argument (optional):\n *\n * - A {@link rtv.types.collection_descriptor collection descriptor} specifying\n *   the rules for the values found in the set (note that key-related rules are\n *   ignored since they are not applicable). If not specified, the default\n *   collection descriptor options apply.\n *\n * @name rtv.types.WEAK_SET\n * @const {String}\n * @see {@link rtv.qualifiers}\n * @see {@link rtv.types.SET}\n */\nexport var WEAK_SET = 'weakSet';\n","//// Qualifier Definitions \\\\\\\\\n\n'use strict';\n\n/**\n * Qualifiers\n * @namespace rtv.qualifiers\n */\n\n/**\n * Required qualifier: Property _must_ exist and be of the expected type.\n *  Depending on the type, additional requirements may be enforced.\n *\n * Unless otherwise stated in type-specific rules, this qualifier _requires_ the\n *  property to be defined _somewhere_ within the prototype chain, and does not\n *  allow its value to be `null` or `undefined`.\n *\n * See specific type for additional rules.\n *\n * @name rtv.qualifiers.REQUIRED\n * @const {String}\n * @see {@link rtv.types}\n */\nexport var REQUIRED = '!';\n\n/**\n * Expected qualifier: Property _should_ exist and be of the expected type.\n *  Depending on the type, some requirements may not be enforced.\n *\n * Unless otherwise stated in type-specific rules, this qualifier _requires_ the\n *  property to be defined _somewhere_ within the prototype chain, does not allow\n *  its value to be `undefined`, but does _allow_ its value to be `null`.\n *\n * See specific type for additional rules.\n *\n * @name rtv.qualifiers.EXPECTED\n * @const {String}\n * @see {@link rtv.types}\n */\nexport var EXPECTED = '+';\n\n/**\n * Optional qualifier: Property _may_ exist and be of the expected type.\n *  Depending on the type, some requirements may not be enforced (i.e. less so\n *  than with the `EXPECTED` qualifier).\n *\n * Unless otherwise stated in type-specific rules, this qualifier _allows_ a\n *  property value to be `null` as well as `undefined`, and does _not_ require\n *  it to be defined anywhere in the prototype chain. If the property is defined,\n *  then it is treated as an `EXPECTED` value.\n *\n * See specific type for additional rules.\n *\n * @name rtv.qualifiers.OPTIONAL\n * @const {String}\n * @see {@link rtv.types}\n */\nexport var OPTIONAL = '?';\n","//// Enumeration \\\\\\\\\n\n'use strict';\n\n/**\n * Simple enumeration type.\n * @class rtv.Enumeration\n * @param {Object.<String,*>} map Object mapping keys to values. Values cannot\n *  be `undefined`.\n * @throws {Error} If `map` is falsy or empty.\n * @throws {Error} If `map` has a key that maps to `undefined`.\n */\nvar Enumeration = function(map) {\n    map = map || {};\n\n    var keys = Object.keys(map);\n    var values = [];\n\n    if (keys.length === 0) {\n        throw new Error('map must contain at least one key');\n    }\n\n    // shallow-clone each key in the map into this\n    keys.forEach((key) => {\n        if (map[key] === undefined) {\n            throw new Error('map[' + key + '] cannot be undefined');\n        }\n\n        var value = map[key];\n        values.push(value);\n        this[key] = value;\n    });\n\n    /**\n     * [internal] List of enumeration values.\n     * @name rtv.Enumeration#_values\n     * @type Array.<String>\n     */\n    Object.defineProperty(this, '_values', {\n        enumerable: false, // internal\n        configurable: true,\n        value: values\n    });\n};\n\n/**\n * Validates a value as being in this enumeration. Throws an exception if the value\n *  is not in this enumeration, unless `silent` is true.\n * @method rtv.Enumeration#validate\n * @param {*} value Value to check. Cannot be undefined.\n * @param {Boolean} [silent=false] If truthy, returns `undefined` instead of throwing\n *  an exception if the specified value is not in this enumeration.\n * @returns {*} The specified value if it is in this enumeration, or `undefined` if\n *  `silent` is true and the value is not in this enumeration.\n */\nEnumeration.prototype.validate = function(value, silent) {\n    if (this._values.indexOf(value) >= 0) {\n        return value;\n    } else if (silent) {\n        return undefined;\n    } else {\n        throw new Error('invalid value for enum[' + this._values.join(', ') + ']: ' + value);\n    }\n};\n\nexport default Enumeration;\n","//// Main entry point \\\\\\\\\n\n'use strict';\n\nimport { default as isString } from 'lodash-es/isString';\nimport { version as VERSION } from '../package.json';\nimport * as typeMap from './types';\nimport * as qualifierMap from './qualiiers';\nimport Enumeration from './Enumeration';\n\n/**\n * RTV.js\n * @namespace rtv\n */\n\n/**\n * Shape Descriptor\n *\n * // TODO: document rtv.shape_descriptor (already referenced)\n *\n * @typedef {Object} rtv.shape_descriptor\n */\n\nconst types = new Enumeration(typeMap);\nvar qualifiers = new Enumeration(qualifierMap);\n\nvar rtv = {\n  _version: VERSION,\n\n  check: function(value, shape) {\n    return isString(value) && !!value;\n  },\n  verify: function(value, shape) {\n    if (this.config.enabled) {\n      if (!this.check(value, shape)) {\n        throw new Error('value must be a ' + types.STRING + ': ' + value);\n      }\n    }\n  },\n\n  config: {\n    enabled: true\n  },\n\n  Context: function(context) {\n    // TODO: a version with same API (less 'config') that will include 'context' in errors thrown\n  },\n\n  types: types,\n  qualifiers: qualifiers\n};\n\nexport default rtv;\n"],"names":["symToStringTag","objectProto","nativeObjectToString","ANY","STRING","BOOLEAN","NUMBER","SYMBOL","FINITE","INT","FLOAT","ANY_OBJECT","OBJECT","PLAIN_OBJECT","CLASS_OBJECT","MAP_OBJECT","ARRAY","JSON","FUNCTION","REGEXP","DATE","ERROR","PROMISE","MAP","WEAK_MAP","SET","WEAK_SET","REQUIRED","EXPECTED","OPTIONAL","Enumeration","map","keys","Object","values","length","Error","forEach","key","undefined","value","push","defineProperty","prototype","validate","silent","_values","indexOf","join","types","typeMap","qualifiers","qualifierMap","rtv","VERSION","shape","isString","config","enabled","check","context"],"mappings":"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"}