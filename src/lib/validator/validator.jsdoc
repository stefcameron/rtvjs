////// Validator Module

/**
 * <h3>RTV.js Type Validators</h3>
 *
 * This namespace provides validators for each supported {@link rtvref.types type},
 *  capable of fully validating a value against that type. Validators differ from
 *  type _validations_ provided by the {@link rtvref.validation validation}
 *  module in that validators verify a value against a single, specific type,
 *  considering {@link rtvref.qualifiers qualifiers} as well as
 *  {@link rtvref.types.type_arguments type arguments}.
 *
 * __Every validator module must provide the following interface:__
 *
 * - `{function} default` (the default export): The
 *   {@link rtvref.validator.type_validator type validator} itself.
 * - `{string} type`: The {@link rtvref.types type} verified.
 * - `{function} config`: The
 *   {@link rtvref.validator.validator_config configuration function}.
 *
 * Validator modules should be named as `val<Type>` such that their default
 *  export is named `val<Type>`.
 *
 * There can only be one validator for any given type. Where possible, each
 *  validator should use applicable {@link rtvref.validation type validations}
 *  rather than third-party code (e.g. lodash) to ensure that the semantics of
 *  each type is properly interpreted. If the validator introduces an entirely
 *  new type, then it should use whatever means necessary to properly identify
 *  the type which it validates.
 *
 * @namespace rtvref.validator
 */

// TODO[plugins]: Later, if we ever expose a plugin architecture, we might change
//  the design to pass some type of registration function into the plugin, or the plugin
//  calls a registration method on rtv, or maybe something else. Whatever we do,
//  the basics would be to register a new type and provide the function for rtv to
//  call to validate values for that type. Perhaps we might even allow overriding
//  the default validator for an existing type.

/**
 * <h3>Type Validator Function</h3>
 *
 * NOTE: A validator must always give __precedence__ to
 *  {@link rtvref.types.qualifier_rules qualifier rules} for the type it's
 *  validating, over any arguments specified. For example,
 *
 * __NOTE:__ A validator must support all its qualifier rules, including proper
 *  handling of `null` values when {@link rtvref.qualifiers.EXPECTED EXPECTED}
 *  and `undefined` values when {@link rtvref.qualifiers.OPTIONAL OPTIONAL},
 *  __in addition to__ any type-specific qualifier rules. For example, the
 *  {@link rtvref.types.STRING STRING} type permits empty strings when not
 *  {@link rtvref.qualifiers.REQUIRED REQUIRED}.
 *
 * @function rtvref.validator.type_validator
 * @param {*} value The value to validate.
 * @param {string} qualifier The validation qualifier from the immediate
 *  {@link rtvref.types.typeset typeset} in which the pertaining type was specified.
 *  Validators should always explicitly default to
 *  {@link rtvref.qualifiers.REQUIRED REQUIRED} to maintain consistent behavior.
 * @param {Object} args The arguments object, if any/applicable, for the type
 *  being validated. For example, {@link rtvref.types.STRING_args string args} in
 *  a typeset such as `[rtv.STRING, {min: 5}]` (a required string of at least
 *  5 characters in length).
 * @param {rtvref.validator.type_validator_context} context Additional context
 *  for the validation.
 * @returns {(rtvref.RtvSuccess|rtvref.RtvError)} An `RtvSuccess` if valid;
 *  `RtvError` if not.
 */

// TODO[plugins]: Consider using the context to pass-in the `impl` reference instead
//  of having the configuration mechanism. That could make the architecture cleaner,
//  unless plugins shouldn't have access to the `impl`? The current mechanism could
//  be used by the internal/provided validators and not provided to third-party ones?
/**
 * <h3>Type Validator Context</h3>
 *
 * This object provides important information to a
 *  {@link rtvref.validator.type_validator type validator}, including a
 *  {@link rtvref.types.custom_validator custom validator}, about the context
 *  of the current validation check.
 *
 * For example, a call to `rtv.verify({foo: 1}, {foo: rtv.NUMBER})` would have the
 *  following `context` regardless of the nesting level of the invoked validator:
 *
 * <pre><code>{
 *   originalValue: {foo: 1}
 * }
 * </code></pre>
 *
 * This means that when the `NUMBER` {@link rtvref.validator.type_validator type validator}
 *  is invoked to check the number `1`, its first parameter, `value`, will be `1`, but it
 *  will still have access to the original value through its `context` parameter.
 *
 * @typedef {Object} rtvref.validator.type_validator_context
 * @property {*} originalValue The original/first value given to
 *  {@link rtv.check rtv.check()} or {@link rtv.verify rtv.verify()}.
 */

// TODO[plugins]: Plugins should also be given access to the types and qualifiers
//  __modules__ which they don't have access to via impl.
/**
 * <h3>Type Validator Configuration Settings</h3>
 *
 * The settings provided to the
 *  {@link rtvref.validator.validator_config configuration function}.
 *
 * @typedef {Object} rtvref.validator.validator_config_settings
 * @property {rtvref.impl} impl Reference to the `impl` module.
 */

// TODO[plugins]: Is it good to expose the entire impl module to _any_ type validator,
//  even third-party plugin validators in the future? Should we, instead, provide
//  a series of function references without stating where they come from (even
//  if they're still just coming from `impl`)? A good exercise will be to actually
//  implement the plugin architecture and write a third-party validator to really
//  see what it's like... For now, this is all still internal, so we're going
//  to roll with that.
/**
 * <h3>Type Validator Configuration Function</h3>
 *
 * This function is called to provide the
 *  {@link rtvref.validator.type_validator type validator} with access to
 *  internal utilities.
 *
 * @function rtvref.validator.validator_config
 * @param {rtvref.validator.validator_config_settings} settings Configuration settings.
 */
